/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import cinema.Services;
import java.rmi.RemoteException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.Movie;
import models.Session;
import models.Ticket;
import utils.ComboBoxCustomLabel;

/**
 *
 * @author higor
 */
public class Gerenciar extends javax.swing.JFrame {

    /**
     * Creates new form Gerenciar
     */
    final private Services server;

    public Gerenciar(Services server) {
        initComponents();
        this.server = server;
        ListarFilmes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        combo_filmes = new javax.swing.JComboBox<>();
        combo_datas = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_ingressos = new javax.swing.JTable();
        btn_criarSessao = new javax.swing.JButton();
        btn_finalizar = new javax.swing.JButton();
        btn_adicionar = new javax.swing.JButton();
        combo_horarios = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gerênciar");
        setResizable(false);

        combo_filmes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione um filme" }));
        combo_filmes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_filmesItemStateChanged(evt);
            }
        });

        combo_datas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione uma data" }));
        combo_datas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_datasItemStateChanged(evt);
            }
        });

        table_ingressos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sala", "Poltrona", "Disponivel", "Usuário"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_ingressos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table_ingressos);
        if (table_ingressos.getColumnModel().getColumnCount() > 0) {
            table_ingressos.getColumnModel().getColumn(0).setResizable(false);
            table_ingressos.getColumnModel().getColumn(0).setPreferredWidth(2);
            table_ingressos.getColumnModel().getColumn(1).setResizable(false);
            table_ingressos.getColumnModel().getColumn(1).setPreferredWidth(2);
            table_ingressos.getColumnModel().getColumn(2).setResizable(false);
            table_ingressos.getColumnModel().getColumn(2).setPreferredWidth(2);
            table_ingressos.getColumnModel().getColumn(3).setResizable(false);
            table_ingressos.getColumnModel().getColumn(3).setPreferredWidth(120);
        }

        btn_criarSessao.setText("Criar Sessão");
        btn_criarSessao.setEnabled(false);
        btn_criarSessao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_criarSessaoActionPerformed(evt);
            }
        });

        btn_finalizar.setText("Finalizar Sessão");
        btn_finalizar.setEnabled(false);
        btn_finalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_finalizarActionPerformed(evt);
            }
        });

        btn_adicionar.setText("Adicionar");
        btn_adicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_adicionarActionPerformed(evt);
            }
        });

        combo_horarios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione um horario" }));
        combo_horarios.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_horariosItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_finalizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_criarSessao))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(combo_filmes, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_adicionar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(combo_datas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_horarios, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_filmes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_adicionar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_datas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_horarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_criarSessao)
                    .addComponent(btn_finalizar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_adicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_adicionarActionPerformed
        new AdicionarFilme(server).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_adicionarActionPerformed

    private void combo_filmesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_filmesItemStateChanged
        if (combo_filmes.getSelectedIndex() != 0 && combo_filmes.getSelectedIndex() != -1) {
            btn_criarSessao.setEnabled(true);
            Movie filme = (Movie) combo_filmes.getSelectedItem();
            ListarDatasSessoes(filme);
        } else {
            btn_criarSessao.setEnabled(false);
            DefaultComboBoxModel dados = (DefaultComboBoxModel) combo_datas.getModel();
            dados.removeAllElements();
            dados.addElement("Selecione uma data");
        }
    }//GEN-LAST:event_combo_filmesItemStateChanged

    private void combo_datasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_datasItemStateChanged
        if (combo_datas.getSelectedIndex() != 0 && combo_datas.getSelectedIndex() != -1) {
            Session sessao = (Session) ((ComboBoxCustomLabel) combo_datas.getSelectedItem()).getValue();
            ListarHorariosSessoes(sessao);
        } else {
            DefaultComboBoxModel dados = (DefaultComboBoxModel) combo_horarios.getModel();
            dados.removeAllElements();
            dados.addElement("Selecione um horário");
        }
    }//GEN-LAST:event_combo_datasItemStateChanged

    private void btn_criarSessaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_criarSessaoActionPerformed
        Movie filme = (Movie) combo_filmes.getSelectedItem();
        new CriarSessao(server, filme).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_criarSessaoActionPerformed

    private void combo_horariosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_horariosItemStateChanged
        if (combo_horarios.getSelectedIndex() != 0 && combo_horarios.getSelectedIndex() != -1) {
            Session sessao = (Session) ((ComboBoxCustomLabel) combo_horarios.getSelectedItem()).getValue();
            btn_finalizar.setEnabled(!sessao.isFinalizada());
            ListarIngressos(sessao);
        } else {
            btn_finalizar.setEnabled(false);
            DefaultTableModel dados = (DefaultTableModel) table_ingressos.getModel();
            dados.setNumRows(0);
        }
    }//GEN-LAST:event_combo_horariosItemStateChanged

    private void btn_finalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_finalizarActionPerformed
        try {
            Session sessao = (Session) ((ComboBoxCustomLabel) combo_horarios.getSelectedItem()).getValue();
            server.finalizarSessao(sessao);
            ListarFilmes();
        } catch (RemoteException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao finalizar: " + ex.getMessage());
            Logger.getLogger(Gerenciar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_finalizarActionPerformed

    private void ListarFilmes() {
        DefaultComboBoxModel dados = (DefaultComboBoxModel) combo_filmes.getModel();
        dados.removeAllElements();
        dados.addElement("Selecione um filme");
        try {
            List<Movie> FilmeList = server.listarFilmes();
            FilmeList.forEach(filme -> {
                dados.addElement(filme);
            });
        } catch (RemoteException ex) {
            Logger.getLogger(ComprarIngressos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ListarDatasSessoes(Movie filme) {
        DefaultComboBoxModel dados = (DefaultComboBoxModel) combo_datas.getModel();
        dados.removeAllElements();
        dados.addElement("Selecione uma data");
        try {
            List<Session> sessionList = server.listarDatasSessao(filme);
            sessionList.forEach(session -> {
                dados.addElement(new ComboBoxCustomLabel(session.getData().toString(), session));
            });
        } catch (RemoteException ex) {
            Logger.getLogger(ComprarIngressos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ListarHorariosSessoes(Session sessao) {
        DefaultComboBoxModel dados = (DefaultComboBoxModel) combo_horarios.getModel();
        dados.removeAllElements();
        dados.addElement("Selecione um horário");
        try {
            List<Session> sessionList = server.listarHorariosSessao(sessao);
            sessionList.forEach(session -> {
                dados.addElement(new ComboBoxCustomLabel(session.getHora().toString() + " - Sala " + session.getSala().getNumSala(), session));
            });
        } catch (RemoteException ex) {
            Logger.getLogger(ComprarIngressos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ListarIngressos(Session sessao) {
        DefaultTableModel dados = (DefaultTableModel) table_ingressos.getModel();
        dados.setNumRows(0);

        try {
            List<Ticket> ingressoList = server.listarIngressos(sessao);
            for (Ticket ingresso : ingressoList) {
                dados.addRow(new String[]{
                    String.valueOf(ingresso.getPoltrona().getSala().getNumSala()),
                    ingresso.getPoltrona().getNum(),
                    ingresso.isDisponivel() ? "Sim" : "Não",
                    ingresso.getCompra().getUsuario().getNome() != null ? ingresso.getCompra().getUsuario().getNome() : ""
                });
            }
        } catch (RemoteException ex) {
            Logger.getLogger(ComprarIngressos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_adicionar;
    private javax.swing.JButton btn_criarSessao;
    private javax.swing.JButton btn_finalizar;
    private javax.swing.JComboBox<Object> combo_datas;
    private javax.swing.JComboBox<Object> combo_filmes;
    private javax.swing.JComboBox<Object> combo_horarios;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_ingressos;
    // End of variables declaration//GEN-END:variables
}
